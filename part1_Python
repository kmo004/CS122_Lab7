                                                                                
import spidev
import time
_numValues = 0
_mean = 0
_s = 0


def WelfordsAlgorithm(newLightValue):
        global _numValues
        global _mean
        global _s
        _numValues += 1
        if _numValues == 1:
                _mean = newLightValue
                _s = 0
        else:
                _oldMean = _mean
                _mean =  _oldMean + (newLightValue - _oldMean) /  _numValues
                _s =  _s + ((newLightValue - _oldMean) * (newLightValue - _mean))
        #print (_numValues)
        return _mean

def createSPI(device):
        spi = spidev.SpiDev()
        spi.open(0,device)
        spi.max_speed_hz=1000000
        spi.mode = 0
        return spi

if __name__ == '__main__':
        try:
                spiR = createSPI(0)
                spiS    = createSPI(1)
                while True:
                        #newLightValue = (spiR.readbytes(1))
                        #print (newLightValue)
                        average = WelfordsAlgorithm(spiR.readbytes(1)[0])
                        #average = WelfordsAlgorithm(5)
                        print (average)
                        spiS.xfer([int(average)])
                        time.sleep(1)
        except KeyboardInterrupt:
                spiR.close()
                spiS.close()
                exit()

